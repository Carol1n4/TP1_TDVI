head(data)
# --- Preprocesamiento ---
# Convertir loan_status en factor con etiquetas legibles
data$loan_status <- factor(data$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
summary(datos)
length(datos) #cantidad de columnas
# Vista general
str(data)
head(data)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
summary(datos)
length(datos) #cantidad de columnas
# Vista general
str(data)
head(data)
# Preprocesamiento
data$loan_status <- factor(data$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
# Preprocesamiento
data$loan_status <- factor(data$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
# Preprocesamiento
data$loan_status <- factor(data$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
# Preprocesamiento
data$loan_status <- factor(data$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
summary(datos)
length(datos) #cantidad de columnas
# Preprocesamiento
data$loan_status <- factor(data$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
unique(datos$loan_status)
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
datos_raw <- read.csv("loan_data.csv", stringsAsFactors = FALSE)
unique(datos_raw$loan_status)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c(0,1),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# Gráfico 1: Distribución de loan_status
ggplot(datos, aes(x = loan_status)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribución de estados del préstamo",
x = "Estado", y = "Cantidad") +
theme_minimal(base_size = 12)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
library(ggplot2)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
library(ggplot2)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# Gráfico 1: Distribución de loan_status
ggplot(datos, aes(x = loan_status)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribución de estados del préstamo",
x = "Estado", y = "Cantidad") +
theme_minimal(base_size = 12)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
library(ggplot2)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# Gráfico 2: Ingresos por loan_status
ggplot(datos, aes(x = loan_status, y = person_income)) +
geom_boxplot(fill = "lightgreen", outlier.alpha = 0.3) +
scale_y_continuous(labels = scales::label_number(big.mark = ".", decimal.mark = ",")) +
labs(title = "Ingresos por estado del préstamo",
x = "Estado del préstamo", y = "Ingreso anual") +
theme_minimal(base_size = 12)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
library(ggplot2)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
#Guardamos la cantidad de muestras en dtos_totales:
datos_totales<- nrow(datos)
#calulamos la cantidad de muestras para cada conjunto de datos (test, train y validation):
tamano_entrenamiento <- 0.7 * datos_totales
tamano_validacion <- 0.15 * datos_totales
tamano_testeo <- datos_totales - tamano_entrenamiento - tamano_validacion
indices <- sample(1:datos_totales)
entrenamiento_indices <- indices[1:tamano_entrenamiento]  # 70% de los datos
validacion_indices <- indices[(tamano_entrenamiento + 1):(tamano_entrenamiento + tamano_validacion)]  # 15% de los datos
testeo_indices <- indices[(tamano_entrenamiento + tamano_validacion + 1):datos_totales]  # 15% restantes
# Crear los tres conjuntos de datos
train_data <- datos[entrenamiento_indices, ]
valid_data <- datos[validacion_indices, ]
test_data <- datos[testeo_indices, ]
tree <- rpart(formula = loan_status ~ person_age + person_gender + person_education + person_income + person_emp_exp + person_home_ownership + loan_amnt + loan_intent + loan_int_rate + loan_percent_income+ cb_person_cred_hist_length+ credit_score+ previous_loan_defaults_on_file,
data = train_data,
method = "class")
rpart.control()
library(rpart.plot)
rpart.plot(tree)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
library(ggplot2)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# Predicciones sobre el conjunto de test
predicciones <- predict(tree, newdata = test_data, type = "class")
# Matriz de confusión y métricas
library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
install.packages("rpart") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
install.packages("rpart") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
install.packages("caret") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
install.packages("caret") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
#install.packages("caret") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
install.packages("recipes") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
#install.packages("recipes") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
library(rpart.plot)
rpart.plot(tree)
#install.packages("recipes") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
#library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# Gráfico 1: Distribución de loan_status
ggplot(datos, aes(x = loan_status)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribución de estados del préstamo",
x = "Estado", y = "Cantidad") +
theme_minimal(base_size = 12)
# Gráfico 2: Ingresos por loan_status
ggplot(datos, aes(x = loan_status, y = person_income)) +
geom_boxplot(fill = "lightgreen", outlier.alpha = 0.3) +
scale_y_continuous(labels = scales::label_number(big.mark = ".", decimal.mark = ",")) +
labs(title = "Ingresos por estado del préstamo",
x = "Estado del préstamo", y = "Ingreso anual") +
theme_minimal(base_size = 12)
#Guardamos la cantidad de muestras en dtos_totales:
datos_totales<- nrow(datos)
#calulamos la cantidad de muestras para cada conjunto de datos (test, train y validation):
tamano_entrenamiento <- 0.7 * datos_totales
tamano_validacion <- 0.15 * datos_totales
tamano_testeo <- datos_totales - tamano_entrenamiento - tamano_validacion
indices <- sample(1:datos_totales)
entrenamiento_indices <- indices[1:tamano_entrenamiento]  # 70% de los datos
validacion_indices <- indices[(tamano_entrenamiento + 1):(tamano_entrenamiento + tamano_validacion)]  # 15% de los datos
testeo_indices <- indices[(tamano_entrenamiento + tamano_validacion + 1):datos_totales]  # 15% restantes
# Crear los tres conjuntos de datos
train_data <- datos[entrenamiento_indices, ]
valid_data <- datos[validacion_indices, ]
test_data <- datos[testeo_indices, ]
tree <- rpart(formula = loan_status ~ person_age + person_gender + person_education + person_income + person_emp_exp + person_home_ownership + loan_amnt + loan_intent + loan_int_rate + loan_percent_income+ cb_person_cred_hist_length+ credit_score+ previous_loan_defaults_on_file,
data = train_data,
method = "class")
rpart.control()
library(rpart.plot)
rpart.plot(tree)
# Predicciones sobre el conjunto de test
predicciones <- predict(tree, newdata = test_data, type = "class")
# Matriz de confusión y métricas
confusionMatrix(predicciones, test_data$loan_status, positive = "Aprobado")
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
#install.packages("recipes") #Descomentar si no lo tienen ya instalado.
library(rpart)
library(ggplot2)
library(dplyr)
library(janitor)
#library(caret)
datos <- read.csv('loan_data.csv', stringsAsFactors = FALSE)
# Preprocesamiento
datos$loan_status <- factor(datos$loan_status,
levels = c("0","1"),
labels = c("Rechazado","Aprobado"))
datos$person_gender <- as.factor(datos$person_gender)
datos$person_education <- as.factor(datos$person_education)
datos$person_home_ownership <- as.factor(datos$person_home_ownership)
datos$loan_intent <- as.factor(datos$loan_intent)
datos$previous_loan_defaults_on_file <- as.factor(datos$previous_loan_defaults_on_file)
# Chequeo de faltantes
colSums(is.na(datos))
# 2.3 Estadísticas descriptivas
# Numéricas principales
summary(datos[, c("person_age","person_income","loan_amnt","loan_int_rate","credit_score")])
# Categóricas principales
table(datos$loan_status)
prop.table(table(datos$loan_status))
table(datos$loan_intent)
# Gráfico 1: Distribución de loan_status
ggplot(datos, aes(x = loan_status)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribución de estados del préstamo",
x = "Estado", y = "Cantidad") +
theme_minimal(base_size = 12)
# Gráfico 2: Ingresos por loan_status
ggplot(datos, aes(x = loan_status, y = person_income)) +
geom_boxplot(fill = "lightgreen", outlier.alpha = 0.3) +
scale_y_continuous(labels = scales::label_number(big.mark = ".", decimal.mark = ",")) +
labs(title = "Ingresos por estado del préstamo",
x = "Estado del préstamo", y = "Ingreso anual") +
theme_minimal(base_size = 12)
#Guardamos la cantidad de muestras en dtos_totales:
datos_totales<- nrow(datos)
#calulamos la cantidad de muestras para cada conjunto de datos (test, train y validation):
tamano_entrenamiento <- 0.7 * datos_totales
tamano_validacion <- 0.15 * datos_totales
tamano_testeo <- datos_totales - tamano_entrenamiento - tamano_validacion
indices <- sample(1:datos_totales)
entrenamiento_indices <- indices[1:tamano_entrenamiento]  # 70% de los datos
validacion_indices <- indices[(tamano_entrenamiento + 1):(tamano_entrenamiento + tamano_validacion)]  # 15% de los datos
testeo_indices <- indices[(tamano_entrenamiento + tamano_validacion + 1):datos_totales]  # 15% restantes
# Crear los tres conjuntos de datos
train_data <- datos[entrenamiento_indices, ]
valid_data <- datos[validacion_indices, ]
test_data <- datos[testeo_indices, ]
tree <- rpart(formula = loan_status ~ person_age + person_gender + person_education + person_income + person_emp_exp + person_home_ownership + loan_amnt + loan_intent + loan_int_rate + loan_percent_income+ cb_person_cred_hist_length+ credit_score+ previous_loan_defaults_on_file,
data = train_data,
method = "class")
rpart.control()
# Predicción de clases (Aprobado / Rechazado)
pred_clases <- predict(tree, newdata = test_data, type = "class")
head(pred_clases, 10)  # mostramos las primeras 10 predicciones
# Predicción de probabilidades
pred_probabilidades <- predict(tree, newdata = test_data, type = "prob")
head(pred_probabilidades, 10)  # mostramos las primeras 10 filas de probabilidades
